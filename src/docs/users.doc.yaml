components:
  schemas:
    User:
      type: object
      description: This schema defines the structure and data types for user objects. This format ensures proper interaction with user data and consistency across operations.
      properties:
        _id:
          type: string
          description: Unique identifier for the user, represented as a 24-digit hexadecimal code. Generated automatically. 
        email:
          type: string
          description: User's email.
        password:
          type: string
          description: User's password.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        age:
          type: integer
          format: int64
          description: User's age.
        role:
          type: integer
          format: int64
          description: User's role appwise. Defines authorization. Default is 0.
        photo:
          type: string
          description: User's profile image. Must be URL format. A default image is set in case no URL is provided at the moment of creation.
        verified:
          type: boolean
          description: Defines if the user's account has been verified using the verification code. Default is "false".
        verificationCode:
          type: string
          description: User's unique code for account verification. Represented as a 24-digit hexadecimal code. Generated automatically. 
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created. Uses timestamp in ISO 8601 format. Generated automatically.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated. Uses timestamp in ISO 8601 format. Generated automatically.
      example:
        _id: 6681805ee857f2ed5dbf802e
        email: bobmoog@gmail.com
        password: s3curep4ss
        firstName: Robert
        lastName: Moog
        age: 90
        role: 1
        photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
        verified: true
        verificationCode: 38a956cc75f9a344eb30641a
        createdAt: 2024-06-22T15:07:25.193Z
        updatedAt: 2024-06-22T15:07:25.193Z
    UserCreate:
      type: object
      description: This schema defines the structure and data types for creating an user. It specifies the required and optional fields needed for the operation.
      properties:
        email:
          type: string
          description: User's email.
        password:
          type: string
          description: User's password.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        age:
          type: integer
          format: int64
          description: User's age.
        role:
          type: integer
          format: int64
          description: User's role appwise. Defines authorization. Default is 0.
        photo:
          type: string
          description: User's profile image. Must be URL format. A default image is set in case no URL is provided at the moment of creation. 
      required:
        - email
        - password
        - firstName
        - lastName
        - age
      example:
        email: bobmoog@gmail.com
        password: s3curep4ss
        firstName: Robert
        lastName: Moog
        age: 90
        role: 1
    UserUpdate:
      type: object
      description: This schema defines the structure and data types for updating an user. It specifies the fields needed for the operation. Please note that while every single property is an optional field in the request body, in order to perform an actual update, at least one of the mentioned optional fields must be provided. If not, the request will be processed successfully, but no modifications will be made to the user.  
      properties:
        email:
          type: string
          description: User's email.
        password:
          type: string
          description: User's password.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        age:
          type: integer
          format: int64
          description: User's age.
        role:
          type: integer
          format: int64
          description: User's role appwise. Defines authorization. Default is 0.
        photo:
          type: string
          description: User's profile image. Must be URL format. A default image is set in case no URL is provided at the moment of creation. 
      example:
        firstName: Rupert
        age: 75
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: Used for authentication and authorization in API requests. Consists of an API key passed in the cookie named "token". 
  responses:
    suc201mesres:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The user returned as result of the operation.
          $ref: '#/components/schemas/User'
      example:
        statusCode: 201
        message: 'User created successfully with id 663cea2c57109ba2e5d3b56f'
        response:
          _id: 6681805ee857f2ed5dbf802e
          email: bobmoog@gmail.com
          password: s3curep4ss
          firstName: Robert
          lastName: Moog
          age: 90
          role: 1
          photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
          verified: true
          verificationCode: 38a956cc75f9a344eb30641a
          createdAt: 2024-06-22T15:07:25.193Z
          updatedAt: 2024-06-22T15:07:25.193Z
    suc200res(one):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: object
          description: The user returned as result of the operation.
          $ref: '#/components/schemas/User'
      example:
        statusCode: 200
        response:
          _id: 6681805ee857f2ed5dbf802e
          email: bobmoog@gmail.com
          password: s3curep4ss
          firstName: Robert
          lastName: Moog
          age: 90
          role: 1
          photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
          verified: true
          verificationCode: 38a956cc75f9a344eb30641a
          createdAt: 2024-06-22T15:07:25.193Z
          updatedAt: 2024-06-22T15:07:25.193Z
    suc200res(many):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: array
          description: The users returned as result of the operation.
          items: 
            $ref: '#/components/schemas/User'
      example:
        statusCode: 200
        response:
          - _id: 6681805ee857f2ed5dbf802e
            email: bobmoog@gmail.com
            password: $2b$10$c0sIR.R36RWbmAboJpt6dOAjNqX4TE4fk1HPVEW5aglPoLtJRhKYC
            firstName: Robert
            lastName: Moog
            age: 90
            role: 1
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: 38a956cc75f9a344eb30641a
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
          - _id: 66818054e857f2ed5dbf802c
            email: wendycarlos@gmail.com
            password: $2b$10$hdkmZY8m7hjg7WsU4XnmTubFT0ApNG1LHQg4MV5kCGbLdLQ1mNvca
            firstName: Wendy
            lastName: Carlos
            age: 84
            role: 1
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: 3712cc5816166ef4293b2c8b
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
          - _id: 66818074e857f2ed5dbf8030
            email: pietropiccioni@gmail.com
            password: $2b$10$/cyHhsNZqtQ7Nn7OximAD.D.Pr8GOKyATKWRHDaDP3A9yn6EXkAGG
            firstName: Pietro
            lastName: Piccioni
            age: 29
            role: 0
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: fe7d503dc385088795c74802
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
    suc200respag:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: array
          description: The user(s) returned as result of the operation.
          items: 
            $ref: '#/components/schemas/User'
        paginateInfo:
          type: object
          description: Information about pagination.
          properties:
            page:
              type: integer
              format: int64
              description: Current page number.
            totalPages:
              type: integer
              format: int64
              description: Total number of pages available.
            limit:
              type: integer
              format: int64
              description: Number of documents (users) per page.
            prevPage:
              type: integer
              format: int64
              description: Previous page number.
            nextPage:
              type: integer
              format: int64
              description: Next page number.
            totalDocs:
              type: integer
              format: int64
              description: Total number of documents (users) available.  
      example:
        statusCode: 200
        response:
          - _id: 6681805ee857f2ed5dbf802e
            email: bobmoog@gmail.com
            password: $2b$10$c0sIR.R36RWbmAboJpt6dOAjNqX4TE4fk1HPVEW5aglPoLtJRhKYC
            firstName: Robert
            lastName: Moog
            age: 90
            role: 1
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: 38a956cc75f9a344eb30641a
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
          - _id: 66818054e857f2ed5dbf802c
            email: wendycarlos@gmail.com
            password: $2b$10$hdkmZY8m7hjg7WsU4XnmTubFT0ApNG1LHQg4MV5kCGbLdLQ1mNvca
            firstName: Wendy
            lastName: Carlos
            age: 84
            role: 1
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: 3712cc5816166ef4293b2c8b
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
          - _id: 66818074e857f2ed5dbf8030
            email: pietropiccioni@gmail.com
            password: $2b$10$/cyHhsNZqtQ7Nn7OximAD.D.Pr8GOKyATKWRHDaDP3A9yn6EXkAGG
            firstName: Pietro
            lastName: Piccioni
            age: 29
            role: 0
            photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
            verified: true
            verificationCode: fe7d503dc385088795c74802
            createdAt: 2024-06-22T15:07:25.193Z
            updatedAt: 2024-06-22T15:07:25.193Z
        paginateInfo:
             page: 1
             totalPages: 4
             limit: 3
             prevPage: null
             nextPage: 2
             totalDocs: 8
    suc200mesres(update):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The user returned as result of the operation.
          $ref: '#/components/schemas/User'
      example:
        statusCode: 200
        message: User updated successfully
        response:
          _id: 6681805ee857f2ed5dbf802e
          email: bobmoog@gmail.com
          password: $2b$10$c0sIR.R36RWbmAboJpt6dOAjNqX4TE4fk1HPVEW5aglPoLtJRhKYC
          firstName: Robert
          lastName: Moog
          age: 90
          role: 1
          photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
          verified: true
          verificationCode: 38a956cc75f9a344eb30641a
          createdAt: 2024-06-22T15:07:25.193Z
          updatedAt: 2024-06-22T15:07:25.193Z
    suc200mesres(delete):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The user returned as result of the operation.
          $ref: '#/components/schemas/User'
      example:
        statusCode: 200
        message: User deleted successfully
        response:
          _id: 6681805ee857f2ed5dbf802e
          email: bobmoog@gmail.com
          password: $2b$10$c0sIR.R36RWbmAboJpt6dOAjNqX4TE4fk1HPVEW5aglPoLtJRhKYC
          firstName: Robert
          lastName: Moog
          age: 90
          role: 1
          photo: https://www.iconpacks.net/icons/2/free-user-icon-3296-thumb.png
          verified: true
          verificationCode: 38a956cc75f9a344eb30641a
          createdAt: 2024-06-22T15:07:25.193Z
          updatedAt: 2024-06-22T15:07:25.193Z
    err400badRequest:
      type: object
      properties: 
        statusCode:
          type: integer
          format: int64
          description: Status code indicating the failure of the operation.
        message:
          type: string
          description: Message providing details about the error.
      example:
        statusCode: 400
        message: Please, complete obligatory information to continue.
    err403forbidden:
      type: object
      properties: 
        statusCode:
          type: integer
          format: int64
          description: Status code indicating the failure of the operation.
        message:
          type: string
          description: Message providing details about the error.
      example:
        statusCode: 403
        message: Forbidden action.
    err404notFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating failed operation.
        message:
          type: string
          description: Message providing details about the error.
      example:
        statusCode: 404
        message: User not found.
    err500fatal:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating fatal internal server error.
        message:
          type: string
          description: Message providing details about the error.
      example:
        statusCode: 500
        message: Internal server error. Fatal.
paths:
  /api/users:
    post:
      summary: Create a new user.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: New user successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc201mesres'
        400:
          description: The request failed due to missing required fields or unsupported inputs.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err400badRequest'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
    get:
      summary: Retrieve all users, with optional query parameters.
      tags:
        - User
      parameters:
        - name: role
          in: query
          description: Filter users by role.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of users to return per page.
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation returning all users, or user(s) based on query parameters.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/suc200res(many)'
                  - $ref: '#/components/responses/suc200respag'
        404:
          description: Operation failed returning user(s).
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound'  
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
  /api/users/{uid}:
    get:
      summary: Retrieve a user that matches the ID.
      tags:
        - User
      parameters:
        - name: uid
          in: path
          required: true
          description: _id of the user to be retrieved.
          schema:
            type: string
      responses:
        200:
          description: Success retrieving a user.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200res(one)'
        404:
          description: Operation failed returning the user.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound'      
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'   
    put:
      summary: Update a user. Specify the props to be modified in the request's body.
      tags:
        - User
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      parameters:
        - name: uid
          in: path
          required: true
          description: _id of the user to be updated.
          schema:
            type: string
      responses:
        200:
          description: Success updating a user.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200mesres(update)'
        400:
          description: The request failed due to unsupported inputs.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err400badRequest'
        403:
          description: The request failed due to authorization issues.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err403forbidden'
        404:
          description: Operation failed finding the user to update.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound' 
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
    delete:
      summary: Delete a user that matches the ID.
      tags:
        - User
      security:
        - cookieAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          description: _id of the user to be deleted.
          schema:
            type: string
      responses:
        200:
          description: Success deleting a user.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200mesres(delete)'
        403:
          description: The request failed due to authorization issues.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err403forbidden'
        404:
          description: Operation failed finding the user to be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound' 
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'