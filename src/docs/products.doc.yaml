components:
  schemas:
    Product:
      type: object
      description: This schema defines the structure and data types for product objects. This format ensures proper interaction with product data and consistency across operations.
      properties:
        _id: 
          type: string
          description: Unique identifier for the product, represented as a 24-digit hexadecimal code. Generated automatically. 
        title:
          type: string
          description: Product's title.
        photo:
          type: string
          description: Product's image. Must be URL format. A default image is set in case no URL is provided at the moment of creation.
        category:
          type: string
          description: Category to which the product belongs. Default is "TBD".
        price:
          type: number
          description: Product's price. Default is 1.
        stock:
          type: integer
          format: int64
          description: Quantity of stock available. Default is 1.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created. Uses timestamp in ISO 8601 format. Generated automatically.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated. Uses timestamp in ISO 8601 format. Generated automatically.
      example:
        _id: 663cea2c57109ba2e5d3b56f
        title: Airpods Pro 2
        photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
        category: accessories
        price: 249
        stock: 40
        createdAt: 2024-06-26T18:10:45.461Z
        updatedAt: 2024-06-26T18:10:45.461Z
    ProductCreate:
      type: object
      description: This schema defines the structure and data types for creating a product. It specifies the required and optional fields needed for the operation. 
      properties:
        title:
          type: string
          description: Product's title. Required.
        photo:
          type: string
          description: Product's image URL. Optional. A default image is set if not provided.
        category:
          type: string
          description: Category of the product. Optional. Default is "TBD."
        price:
          type: number
          description: Product's price. Optional. Default is 1.
        stock:
          type: integer
          format: int64
          description: Quantity of stock available. Optional. Default is 1.
      required:
        - title
      example:
        title: Airpods Pro 2
        photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
        category: accessories
        price: 249
        stock: 40
    ProductUpdate:
      type: object
      description: This schema defines the structure and data types for updating a product. It specifies the fields needed for the operation. Please note that while every single property is an optional field in the request body, in order to perform an actual update, at least one of the mentioned optional fields must be provided. If not, the request will be processed successfully, but no modifications will be made to the product.  
      properties:
        title:
          type: string
          description: Product's title. Required.
        photo:
          type: string
          description: Product's image URL. Optional. A default image is set if not provided.
        category:
          type: string
          description: Category of the product. Optional. Default is "TBD."
        price:
          type: number
          description: Product's price. Optional. Default is 1.
        stock:
          type: integer
          format: int64
          description: Quantity of stock available. Optional. Default is 1.
      example:
        price: 299
        stock: 60
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: Used for authentication and authorization in API requests. Consists of an API key passed in the cookie named "token". 
  responses:
    suc201mesres:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The product returned as result of the operation.
          $ref: '#/components/schemas/Product'
      example:
        statusCode: 201
        message: 'Product created successfully with id 663cea2c57109ba2e5d3b56f'
        response:
          _id: 663cea2c57109ba2e5d3b56f
          title: Airpods Pro 2
          photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
          category: accessories
          price: 249
          stock: 40
          createdAt: 2024-06-26T18:10:45.461Z
          updatedAt: 2024-06-26T18:10:45.461Z
    suc200res(one):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: object
          description: The product returned as result of the operation.
          $ref: '#/components/schemas/Product'
      example:
        statusCode: 200
        response:
          _id: 663cea2c57109ba2e5d3b56f
          title: Airpods Pro 2
          photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
          category: accessories
          price: 249
          stock: 40
          createdAt: 2024-06-26T18:10:45.461Z
          updatedAt: 2024-06-26T18:10:45.461Z
    suc200res(many):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: array
          description: The products returned as result of the operation.
          items: 
            $ref: '#/components/schemas/Product'
      example:
        statusCode: 200
        response:
          - _id: 663cea2c57109ba2e5d3b56f
            title: Airpods Pro 2
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: accessories
            price: 249
            stock: 40
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z
          - _id: 663cea2c57109ba2e5d3b571
            title: Airpods Max
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: accessories
            price: 549
            stock: 40
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z            
          - _id: 663cea2c57109ba2e5d3b573
            title: iPhone 15 pro
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: phones
            price: 999
            stock: 30
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z
    suc200respag:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        response: 
          type: array
          description: The product(s) returned as result of the operation.
          items: 
            $ref: '#/components/schemas/Product'
        paginateInfo:
          type: object
          description: Information about pagination.
          properties:
            page:
              type: integer
              format: int64
              description: Current page number.
            totalPages:
              type: integer
              format: int64
              description: Total number of pages available.
            limit:
              type: integer
              format: int64
              description: Number of documents (products) per page.
            prevPage:
              type: integer
              format: int64
              description: Previous page number.
            nextPage:
              type: integer
              format: int64
              description: Next page number.
            totalDocs:
              type: integer
              format: int64
              description: Total number of documents (products) available.  
      example:
        statusCode: 200
        response:
          - _id: 663cea2c57109ba2e5d3b56f
            title: Airpods Pro 2
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: accessories
            price: 249
            stock: 40
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z
          - _id: 663cea2c57109ba2e5d3b571
            title: Airpods Max
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: accessories
            price: 549
            stock: 40
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z            
          - _id: 663cea2c57109ba2e5d3b573
            title: iPhone 15 pro
            photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
            category: phones
            price: 999
            stock: 30
            createdAt: 2024-06-26T18:10:45.461Z
            updatedAt: 2024-06-26T18:10:45.461Z
        paginateInfo:
             page: 1
             totalPages: 501
             limit: 3
             prevPage: null
             nextPage: 2
             totalDocs: 1502 
    suc200mesres(update):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The product returned as result of the operation.
          $ref: '#/components/schemas/Product'
      example:
        statusCode: 200
        message: Product updated successfully
        response:
          _id: 663cea2c57109ba2e5d3b56f
          title: Airpods Pro 2
          photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
          category: accessories
          price: 249
          stock: 40
          createdAt: 2024-06-26T18:10:45.461Z
          updatedAt: 2024-06-26T18:10:45.461Z
    suc200mesres(delete):
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating successful operation.
        message:
          type: string
          description: Message providing details about the operation.
        response: 
          type: object
          description: The product returned as result of the operation.
          $ref: '#/components/schemas/Product'
      example:
        statusCode: 200
        message: Product deleted successfully
        response:
          _id: 663cea2c57109ba2e5d3b56f
          title: Airpods Pro 2
          photo: https://i.pinimg.com/originals/1c/18/78/1c1878a8b006593b5a6a84e3f85df24a.png
          category: accessories
          price: 249
          stock: 40
          createdAt: 2024-06-26T18:10:45.461Z
          updatedAt: 2024-06-26T18:10:45.461Z
    err400badRequest:
      type: object
      properties: 
        statusCode:
          type: integer
          format: int64
          description: Status code indicating the failure of the operation.
        message:
          type: string
          description: Message providing details about the operation.
      example:
        statusCode: 400
        message: Please, complete obligatory information to continue.
    err403forbidden:
      type: object
      properties: 
        statusCode:
          type: integer
          format: int64
          description: Status code indicating the failure of the operation.
        message:
          type: string
          description: Message providing details about the operation.
      example:
        statusCode: 403
        message: Forbidden action.
    err404notFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating failed operation.
        message:
          type: string
          description: Message providing details about the operation
      example:
        statusCode: 404
        message: Product not found.
    err500fatal:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: Status code indicating fatal internal server error.
        message:
          type: string
          description: Message providing details about the error.
      example:
        statusCode: 500
        message: Internal server error. Fatal.
paths:
  /api/products:
    post:
      summary: Create a new product.
      tags:
        - Product
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        201:
          description: New product successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc201mesres'
        400:
          description: The request failed due to missing required fields or unsupported inputs.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err400badRequest'
        403:
          description: The request failed due to authorization issues.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err403forbidden'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
    get:
      summary: Retrieve all products, with optional query parameters.
      tags:
        - Product
      parameters:
        - name: category
          in: query
          description: Filter products by category.
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: Filter products by title.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products to return per page.
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation returning all products, or product(s) based on query parameters.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/suc200res(many)'
                  - $ref: '#/components/responses/suc200respag'
        404:
          description: Operation failed returning product(s).
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound'  
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
  /api/products/{pid}:
    get:
      summary: Retrieve a product that matches the ID.
      tags:
        - Product
      parameters:
        - name: pid
          in: path
          required: true
          description: _id of the product to be retrieved.
          schema:
            type: string
      responses:
        200:
          description: Success retrieving a product.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200res(one)'
        404:
          description: Operation failed returning the product.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound'      
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'   
    put:
      summary: Update a product. Specify the props to be modified in the request's body.
      tags:
        - Product
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      parameters:
        - name: pid
          in: path
          required: true
          description: _id of the product to be updated.
          schema:
            type: string
      responses:
        200:
          description: Success updating a product.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200mesres(update)'
        400:
          description: The request failed due to unsupported inputs.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err400badRequest'
        403:
          description: The request failed due to authorization issues.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err403forbidden'
        404:
          description: Operation failed finding the product to update.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound' 
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'
    delete:
      summary: Delete a product that matches the ID.
      tags:
        - Product
      security:
        - cookieAuth: []
      parameters:
        - name: pid
          in: path
          required: true
          description: _id of the product to be deleted.
          schema:
            type: string
      responses:
        200:
          description: Success deleting a product.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/suc200mesres(delete)'
        403:
          description: The request failed due to authorization issues.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err403forbidden'
        404:
          description: Operation failed finding the product to be deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err404notFound' 
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/err500fatal'